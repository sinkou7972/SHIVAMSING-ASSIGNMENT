use mavenmovies;

-- Retrieve the total number of rentals made in the Sakila database.
-- ANSWER:
select count(rental_rate) from film;

-- find the average rental duration (in days) of movies rented from the Sakila database.
-- ANSWER:
select avg(rental_duration) from film;

-- Display the first name and last name of customers in uppercase.
-- ANSWER:
SELECT upper(first_name), (last_name) from customer;


-- Extract the month from the rental date and display it alongside the rental ID.
-- ANSWER:
Select rental_id, MONTH(rental_date) FROM rental;


-- Retrieve the count of rentals for each customer (display customer ID and the count of rentals).  
 -- ANSWER:
SELECT customer_id, COUNT(rental_id) AS RENTAL_COUNT FROM rental GROUP BY customer_id;

-- Find the total revenue generated by each store.  
-- ANSWER:
SELECT store_id, SUM(store_id) as total_revenue
FROM inventory 
GROUP BY store_id;


--  Display the title of the movie, customer's first name, and last name who rented it. 
-- ANSWER:
 SELECT film.title,
    customer.first_name,customer.last_name
FROM film
JOIN rental ON film.film_id = film.film_id
JOIN customer ON rental.customer_id = customer.customer_id;
    
    
-- Retrieve the names of all actors who have appeared in the film "Gold River." 
-- ANSWER:
SELECT * FROM actor
JOIN film_actor ON actor.actor_id = film_actor.actor_id
JOIN film ON film_actor.film_id = film.film_id
WHERE film.title = 'Gold River';


-- Determine the total number of rentals for each category of movies.  
-- ANSWER:
SELECT film_category.category_id, COUNT(rental.rental_id) AS total_rentals
FROM film
JOIN film_category ON film.film_id = film_category.category_id
JOIN rental ON film.film_id = film.film_id
GROUP BY film_category.category_id;

    
-- find the average rental rate of movies in each language. 
-- ANSWER:
SELECT language.name AS language_name, AVG(film.rental_rate) AS average_rental_rate
FROM film
JOIN language ON film.language_id = language.language_id
GROUP BY language.name;

--  Retrieve the customer names along with the total amount they've spent on rentals. 
-- ANSWER:
SELECT customer.first_name, customer.last_name, SUM(rental.rental_id) AS total_amount_spent
FROM customer
JOIN rental ON customer.customer_id = rental.customer_id
GROUP BY customer.customer_id, customer.first_name, customer.last_name;


-- List the titles of movies rented by each customer in a particular city (e.g., 'London'). 
 -- ANSWER:
SELECT customer.first_name, customer.last_name,
film.title AS rented_movie_title
FROM customer
JOIN rental ON customer.customer_id = rental.customer_id
JOIN film ON rental.customer_id = film.customer_id
WHERE customer.address_id = 'London'
ORDER BY customer.first_name, customer.last_name, rented_movie_title;



-- Display the top 5 rented movies along with the number of times they've been rented. 
-- ANSWER
SELECT film.title AS movie_title, COUNT(rental.rental_id) AS rental_count
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.title
ORDER BY rental_count DESC
LIMIT 5;

--  Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). 
-- ANSWER:
SELECT customer.customer_id, customer.first_name, customer.last_name
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN customer ON rental.customer_id = customer.customer_id
WHERE inventory.store_id IN (1, 2)
GROUP BY customer.customer_id, customer.first_name, customer.last_name
HAVING COUNT(DISTINCT inventory.store_id) = 2;

  





 